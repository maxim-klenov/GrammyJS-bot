const db = require('./db');
const { InlineKeyboard } = require('grammy');
let userAnswers = [];

async function deleteMessages(ctx) {
  try {
    const chatId = ctx.chat.id;
    const messageId = ctx.message.message_id;
    for (let i = messageId - 1; i >= messageId - 2; i--) {
      try {
        let res = await ctx.api.deleteMessage(chatId, i);
      } catch (e) {
        if (e.description === 'Bad Request: message to delete not found') {
          true
        } else {
          console.error(e);
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
  }
}

async function start(ctx) {
  
  // delete last session 
  deleteMessages(ctx);
  // Continue executing code here

  if (await db.checkUser(ctx)) {
    return;
  }
  userAnswers.length = 0;
  const gradeInlineKeyboard = new InlineKeyboard()
  .text('6', '0-6')
  .text('7', '0-7')
  .text('8', '0-8')
  .text('9', '0-9')
  .text('10', '0-10')
  .text('11', '0-11');
  await ctx.react("üçæ")
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç!') 
  await ctx.reply(`–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å:`, {
    reply_markup: gradeInlineKeyboard // probably here is the mistake
  })
}

async function restart(ctx) {
  if (await db.checkUser(ctx)) {
    return;
  }
  else {
    if (userAnswers.length === 0) {
      deleteMessages(ctx);
      ctx.reply('/start');
    }
    else {
      // clear array before start
      const startInlineKeyboard = new InlineKeyboard().text('–ù–∞—á–∞—Ç—å', 'Start');
      const grade = userAnswers[0];
      userAnswers.length = 0;
      userAnswers.push(grade);
      // ask to start again 
      await ctx.reply('–ñ–º–∏ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ:', {
        reply_markup: startInlineKeyboard
      });
      // delete last session 
      deleteMessages(ctx);  
    }
  }
}

async function callBackQuery(ctx) {
  if (await db.checkUser(ctx)) {
    return;
  }
  const startInlineKeyboard = new InlineKeyboard().text('–ù–∞—á–∞—Ç—å', 'Start');
  userAnswers.push(ctx.callbackQuery.data);
  await ctx.answerCallbackQuery();
  await ctx.callbackQuery.message.editText('–í—Å–µ –≥–æ—Ç–æ–≤–æ. –ñ–º–∏ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å:', {
    reply_markup: startInlineKeyboard
  });
}

async function onStart(ctx) {
  const questionInlineKeyboard = new InlineKeyboard().text('–†–µ–≥—É–ª—è—Ä–Ω–æ', '1-1').text('–ò–Ω–æ–≥–¥–∞', '1-2').text('–ù–∏–∫–æ–≥–¥–∞', '1-3').row().text('–ù–µ –∑–Ω–∞—é —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ', '1-4');
  await ctx.answerCallbackQuery();
  await ctx.callbackQuery.message.editText(`(1/4)

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤—ã –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É—á–µ–±—ã?`, {
    reply_markup: questionInlineKeyboard
  });
}

async function onFirstQuestion(ctx) {
  userAnswers.push(ctx.callbackQuery.data);
  const questionInlineKeyboard = new InlineKeyboard().text('–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ', '2-1').text('–¢–æ—á–Ω—ã–µ –Ω–∞—É–∫–∏', '2-2').row().text('–Ø–∑—ã–∫–∏', '2-3').text('–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã', '2-4');
  await ctx.answerCallbackQuery();
  await ctx.callbackQuery.message.editText(`(2/4) 
    
–î–ª—è –∫–∞–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ò–ò?`, {
    reply_markup: questionInlineKeyboard
  });
}

async function onSecondQuestion(ctx) {
  userAnswers.push(ctx.callbackQuery.data);
  const questionInlineKeyboard = new InlineKeyboard().text('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ', '3-1').row().text('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ', '3-2').row().text('–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ', '3-3').row();
  await ctx.answerCallbackQuery();
  await ctx.callbackQuery.message.editText(`(3/4) 
    
–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –≤–ª–∏—è–Ω–∏–µ –ò–ò –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è?`, {
    reply_markup: questionInlineKeyboard
  });
}

async function onThirdQuestion(ctx) {
  userAnswers.push(ctx.callbackQuery.data);
  const questionInlineKeyboard = new InlineKeyboard().text('–û–≥—Ä–æ–º–Ω—ã–π. –ó–∞ –ò–ò - –±—É–¥—É—â–µ–µ', '4-1').row().text('–û–ù–û –ü–û–†–û–ë–û–¢–ò–¢ –ß–ï–õ–û–í–ï–ß–ï–°–¢–í–û!!!!', '4-2').row().text('–î—É–º–∞—é –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è', '4-3').row().text('–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å', '4-4');
  await ctx.answerCallbackQuery();
  await ctx.callbackQuery.message.editText(`(4/4) –ü–æ—Å–ª–µ–¥–Ω–∏–π
    
–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —ç—Ç–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –±—É–¥—É—â–µ–º?`, {
    reply_markup: questionInlineKeyboard
  });
}

async function onLastQuestion(ctx) {
  userAnswers.push(ctx.callbackQuery.data);
  await ctx.answerCallbackQuery();
  await ctx.callbackQuery.message.editText(
    `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ.üòÅ`);
  return ctx.from.id;
}
module.exports = { 
  start, 
  restart, 
  callBackQuery, 
  onStart, 
  onFirstQuestion, 
  onSecondQuestion,
  onThirdQuestion,
  onLastQuestion,
  userAnswers 
};